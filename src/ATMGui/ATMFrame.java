package ATMGui;

import com.sun.org.apache.xpath.internal.operations.Bool;
import com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl;

/**
 * JFrame to create the GUI for the ATM machine machine
 *
 * @author Steve Sutton, <ssutton@student.ncmich.edu>
 * @version 0.1 (04/28/2012)
 */
public class ATMFrame extends javax.swing.JFrame
{
    private ATM atm;
    private Bank bank;
    private Card card1;
    private Card card2;
    private Input input;
    private Action actionType;
    private Card insertedCard;

    private Envelope envelope1, envelope2, envelope3;
    private int accountIndexToUse,accountIndexFromUse;
    private int amount;

    private final String NO_CARD_INSERTED = "No card inserted yet!",
            PLEASE_INSERT_YOUR_PIN = "Please enter your PIN",
            WHAT_WOULD_YOU_LIKE_TO_DO = "What would you like to do?",
            WHICH_ACCOUNT = "Which account?",
            WHICH_ACCOUNT_TO = "Which account to",
            WHICH_ACCOUNT_FROM = "Which account from",
            AMOUNT = "Amount?",
            ENTER_DEPOSIT_AMOUNT = "Enter deposit amount",
            CARD_ALREADY_IN = "There's already a card in!",
            CARD_REMOVED = "Your card has been removed",
            DEPOSIT_SUCCESSFUL = "Your Deposit was approved",
            ENVELOPE_EMPTY = "Nothing in Envelope",
            CASH_RETURNED = "Cash Given: ";
    private final String CARD1_PIN = "4455", CARD2_PIN = "5544";
    private final int CARD1_ACCOUNT1_AMOUNT = 500,
            CARD1_ACCOUNT2_AMOUNT = 1200,
            CARD2_ACCOUNT1_AMOUNT = 400,
            CARD2_ACCOUNT2_AMOUNT = 2000;

    /**
     * Creates new form ATMFrame
     */
    public ATMFrame() {
        initComponents();
        input = new Input();
        actionType = null;
        insertedCard = null;
        accountIndexFromUse = accountIndexToUse = -1;
        amount = 0;
        envelope1 = envelope2 = envelope3 = null;
        setupBank();
        setupPetoskeyBankAtm();
        setupBankAtmCards();
    }

    /**
     * Create the Bank
     */
    private void setupBank() {
        bank = new Bank();
    }

    /**
     * Setup the Petoskey's ATM Machine
     */
    private void setupPetoskeyBankAtm() {
        atm = new ATM(bank, "Petoskey");
    }

    /**
     * Setup the Cards with accounts and add to Bank
     */
    private void setupBankAtmCards()
    {
        // create card1 with two accounts
        card1 = new Card();
        Account card1Account1 = new Account("Sutton", "Steve", CARD1_ACCOUNT1_AMOUNT);
        Account card1Account2 = new Account("Sutton", "Steve", CARD1_ACCOUNT2_AMOUNT);
        card1.addAccount(card1Account1);
        card1.addAccount(card1Account2);
        // add card to bank
        bank.addCard(CARD1_PIN, card1);
        envelope1 = new Envelope(100, card1Account1.getAccountNumber());
        System.out.println(envelope1);

        // create card2 with two accounts
        card2 = new Card();
        Account card2Account1 = new Account("Sutton", "Carol", CARD2_ACCOUNT1_AMOUNT);
        Account card2Account2 = new Account("Sutton", "Carol", CARD2_ACCOUNT2_AMOUNT);
        card2.addAccount(card2Account1);
        card2.addAccount(card2Account2);
        // add card to bank
        bank.addCard(CARD2_PIN, card2);
        envelope2 = new Envelope(200, card2Account1.getAccountNumber());
        envelope3 = new Envelope(125, card2Account2.getAccountNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        button0 = new javax.swing.JButton();
        button1 = new javax.swing.JButton();
        button2 = new javax.swing.JButton();
        button9 = new javax.swing.JButton();
        button6 = new javax.swing.JButton();
        button5 = new javax.swing.JButton();
        button4 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        button8 = new javax.swing.JButton();
        button7 = new javax.swing.JButton();
        buttonCancel = new javax.swing.JButton();
        buttonEnter = new javax.swing.JButton();
        endButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        getBalanceButton = new javax.swing.JButton();
        depositButton = new javax.swing.JButton();
        transferButton = new javax.swing.JButton();
        withdrawalButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        cardMenu1 = new javax.swing.JMenuItem();
        cardMenu2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        envelopeMenu1 = new javax.swing.JMenuItem();
        envelopeMenu2 = new javax.swing.JMenuItem();
        envelopeMenu3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bank of Petoskey ATM");

        display.setColumns(20);
        display.setRows(5);
        jScrollPane1.setViewportView(display);

        button0.setText("0");
        button0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button0ActionPerformed(evt);
            }
        });

        button1.setText("1");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        button2.setText("2");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button9.setText("9");
        button9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button9ActionPerformed(evt);
            }
        });

        button6.setText("6");
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });

        button5.setText("5");
        button5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button5ActionPerformed(evt);
            }
        });

        button4.setText("4");
        button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button4ActionPerformed(evt);
            }
        });

        button3.setText("3");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        button8.setText("8");
        button8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button8ActionPerformed(evt);
            }
        });

        button7.setText("7");
        button7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button7ActionPerformed(evt);
            }
        });

        buttonCancel.setText("Cancel");
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelActionPerformed(evt);
            }
        });

        buttonEnter.setText("Enter");
        buttonEnter.setMaximumSize(new java.awt.Dimension(86, 29));
        buttonEnter.setMinimumSize(new java.awt.Dimension(86, 29));
        buttonEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnterActionPerformed(evt);
            }
        });

        endButton.setText("End");
        endButton.setMaximumSize(new java.awt.Dimension(86, 29));
        endButton.setMinimumSize(new java.awt.Dimension(86, 29));
        endButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(button7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(button4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(button5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(button6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(1, 1, 1)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(buttonCancel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(buttonEnter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(button8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(button0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(button9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(48, 48, 48)
                                        .add(endButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(button1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(button2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 41, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(button3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(buttonEnter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonCancel))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(button1)
                            .add(button2)
                            .add(button3))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(button4)
                            .add(button5)
                            .add(button6))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(button7)
                            .add(button8)
                            .add(button9))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(button0)
                    .add(endButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        getBalanceButton.setText("Get Balance");
        getBalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getBalanceButtonActionPerformed(evt);
            }
        });
        jPanel2.add(getBalanceButton);

        depositButton.setText("Deposit");
        depositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositButtonActionPerformed(evt);
            }
        });
        jPanel2.add(depositButton);

        transferButton.setText("Transfer");
        transferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferButtonActionPerformed(evt);
            }
        });
        jPanel2.add(transferButton);

        withdrawalButton.setText("Withdrawal");
        withdrawalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withdrawalButtonActionPerformed(evt);
            }
        });
        jPanel2.add(withdrawalButton);

        jMenu1.setText("Cards");

        cardMenu1.setText("Card 1 [4455]");
        cardMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardMenu1ActionPerformed(evt);
            }
        });
        jMenu1.add(cardMenu1);

        cardMenu2.setText("Card 2 [5544]");
        cardMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardMenu2ActionPerformed(evt);
            }
        });
        jMenu1.add(cardMenu2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Envelopes");

        envelopeMenu1.setText("100 Card1 Account 1");
        envelopeMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envelopeMenu1ActionPerformed(evt);
            }
        });
        jMenu2.add(envelopeMenu1);

        envelopeMenu2.setText("200 Card 2 Account 1");
        envelopeMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envelopeMenu2ActionPerformed(evt);
            }
        });
        jMenu2.add(envelopeMenu2);

        envelopeMenu3.setText("125 Card 2 Account 2");
        envelopeMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envelopeMenu3ActionPerformed(evt);
            }
        });
        jMenu2.add(envelopeMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane1)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * runs the cardMenuAction when user selects a card to add.
     *
     * @param evt event
     */
    private void cardMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardMenu1ActionPerformed
        if(insertedCard == null) {
            // ask for pin number
            display.setText(PLEASE_INSERT_YOUR_PIN);
            actionType = Action.INSERT_CARD;
            insertedCard = card1;
        }
        else {
            display.setText(CARD_ALREADY_IN);
        }
    }//GEN-LAST:event_cardMenu1ActionPerformed

    /**
     * runs the action from button1
     *
     * @param evt event
     */
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        input.addInput(1);
    }//GEN-LAST:event_button1ActionPerformed

    /**
     * runs the action for enter button
     *
     * @param evt event
     */
    private void buttonEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnterActionPerformed
        String inputString = input.getInputAsString();
        input.clearInput();
        String message = "";
        if (actionType != null) {
            switch(actionType) {
                case INSERT_CARD:
                    message = runInsertCardAction(inputString);
                    break;
                case BALANCE:
                    message = runBalanceAction(inputString);
                    break;
                case DEPOSIT:
                    message = runDepositAction(inputString);
                    break;
                case WITHDRAWAL:
                    message = runWithdrawalAction(inputString);
                    break;
                case TRANSFER:
                    message = runTransferAction(inputString);
                    break;
            }
            display.setText(message);
        }
    }//GEN-LAST:event_buttonEnterActionPerformed

    /**
     * runs the action for button2
     *
     * @param evt event
     */
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        input.addInput(2);
    }//GEN-LAST:event_button2ActionPerformed

    /**
     * runs the action for button3
     *
     * @param evt event
     */
    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed
        input.addInput(3);
    }//GEN-LAST:event_button3ActionPerformed

    /**
     * runs the action for button4
     *
     * @param evt event
     */
    private void button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button4ActionPerformed
        input.addInput(4);
    }//GEN-LAST:event_button4ActionPerformed

    /**
     * runs the action for button5
     *
     * @param evt event
     */
    private void button5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button5ActionPerformed
        input.addInput(5);
    }//GEN-LAST:event_button5ActionPerformed

    /**
     * runs the action for button6
     *
     * @param evt event
     */
    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        input.addInput(6);
    }//GEN-LAST:event_button6ActionPerformed

    /**
     * runs the action for button7
     *
     * @param evt event
     */
    private void button7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button7ActionPerformed
        input.addInput(7);
    }//GEN-LAST:event_button7ActionPerformed

    /**
     * runs the action for button8
     *
     * @param evt event
     */
    private void button8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button8ActionPerformed
        input.addInput(8);
    }//GEN-LAST:event_button8ActionPerformed

    /**
     * runs the action for button9
     *
     * @param evt event
     */
    private void button9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button9ActionPerformed
        input.addInput(9);
    }//GEN-LAST:event_button9ActionPerformed

    /**
     * runs the action for button0
     *
     * @param evt event
     */
    private void button0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button0ActionPerformed
        input.addInput(0);
    }//GEN-LAST:event_button0ActionPerformed

    /**
     * runs the action for balanceButton
     *
     * @param evt event
     */
    private void getBalanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getBalanceButtonActionPerformed
        Card card = atm.getCard();
        accountIndexToUse = -1;
        if (card != null) {
            display.setText(new StringBuilder()
                .append(WHICH_ACCOUNT + "\n")
                .append(card.toString())
                .toString());
            actionType = Action.BALANCE;
        }
        else {
            display.setText(NO_CARD_INSERTED);
        }
    }//GEN-LAST:event_getBalanceButtonActionPerformed

    /**
     * runs the actions for depositButton
     *
     * @param evt event
     */
    private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositButtonActionPerformed
        Card card = atm.getCard();
        accountIndexToUse = -1;
        if (card != null) {
            display.setText(new StringBuilder()
                .append(WHICH_ACCOUNT + "\n")
                .append(card.toString())
                .toString());
            actionType = Action.DEPOSIT;
        }
        else {
            display.setText(NO_CARD_INSERTED);
        }
    }//GEN-LAST:event_depositButtonActionPerformed

    /**
     * runs the action for transferButton
     *
     * @param evt event
     */
    private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferButtonActionPerformed
        actionType = Action.TRANSFER;
        display.setText(WHICH_ACCOUNT_FROM);
    }//GEN-LAST:event_transferButtonActionPerformed

    /**
     * runs the action for withdrawalButton
     *
     * @param evt event
     */
    private void withdrawalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withdrawalButtonActionPerformed
        Card card = atm.getCard();
        if (card != null) {
            display.setText(new StringBuilder()
                .append(WHICH_ACCOUNT + "\n")
                .append(card.toString())
                .toString());
            actionType = Action.WITHDRAWAL;
        }
        else {
            display.setText(NO_CARD_INSERTED);
        }
    }//GEN-LAST:event_withdrawalButtonActionPerformed

    /**
     * runs the action for envelopeMenu1
     *
     * @param evt event
     */
    private void envelopeMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envelopeMenu1ActionPerformed
        display.setText(depositEnvelope(envelope1));
    }//GEN-LAST:event_envelopeMenu1ActionPerformed

    /**
     * runs the action for cancelButton
     *
     * @param evt event
     */
    private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
        atm.cancel();
        display.setText(atm.getLastMessage() + "\n" +
                WHAT_WOULD_YOU_LIKE_TO_DO);
        input.clearInput();
    }//GEN-LAST:event_buttonCancelActionPerformed

    /**
     * runs the action for envelopeMenu2
     *
     * @param evt event
     */
    private void envelopeMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envelopeMenu2ActionPerformed
        display.setText(depositEnvelope(envelope2));
    }//GEN-LAST:event_envelopeMenu2ActionPerformed

    /**
     * runs the action for envelopeMenu3
     *
     * @param evt event
     */
    private void envelopeMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envelopeMenu3ActionPerformed
        display.setText(depositEnvelope(envelope3));
    }//GEN-LAST:event_envelopeMenu3ActionPerformed

    /**
     * Removes the card from the machine
     *
     * @param evt event
     */
    private void endButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endButtonActionPerformed
        insertedCard = null;
        actionType = null;
        display.setText(CARD_REMOVED);
        input.clearInput();
    }//GEN-LAST:event_endButtonActionPerformed

    private void cardMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardMenu2ActionPerformed
        if(insertedCard == null) {
            // ask for pin number
            display.setText(PLEASE_INSERT_YOUR_PIN);
            actionType = Action.INSERT_CARD;
            insertedCard = card2;
        }
        else {
            display.setText(CARD_ALREADY_IN);
        }
    }//GEN-LAST:event_cardMenu2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for(javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch(ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch(InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch(IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch(javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATMFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {

            @Override
            public void run() {
                new ATMFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button0;
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JButton button4;
    private javax.swing.JButton button5;
    private javax.swing.JButton button6;
    private javax.swing.JButton button7;
    private javax.swing.JButton button8;
    private javax.swing.JButton button9;
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonEnter;
    private javax.swing.JMenuItem cardMenu1;
    private javax.swing.JMenuItem cardMenu2;
    private javax.swing.JButton depositButton;
    private javax.swing.JTextArea display;
    private javax.swing.JButton endButton;
    private javax.swing.JMenuItem envelopeMenu1;
    private javax.swing.JMenuItem envelopeMenu2;
    private javax.swing.JMenuItem envelopeMenu3;
    private javax.swing.JButton getBalanceButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton transferButton;
    private javax.swing.JButton withdrawalButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns lastMessafe string from the ATM after inserting Card
     *
     * @param inputString input string from user
     *
     * @return message
     */
    private String runInsertCardAction(String inputString) {
        String message = "";
        if (insertedCard != null && inputString.length() > 0) {
            if(atm.enterCard(insertedCard, inputString)) {
                message += WHAT_WOULD_YOU_LIKE_TO_DO;
                actionType = null;
            }
            else {
                if (atm.getToManyAttempts()) {
                    insertedCard = null;
                }
                message += atm.getLastMessage();
            }
        }
        actionType = null;
        return message;
    }

    /**
     * Returns lastMessage string from the ATM after getting balance.
     *
     * @param inputString input string from user
     *
     * @return message
     */
    private String runBalanceAction(String inputString) {
        String message = "";
        if (insertedCard != null && inputString.length() > 0) {
            int accountIndex = Integer.parseInt(inputString);
            accountIndex--;
            System.out.println("Account index used" + accountIndex);
            int balance = atm.getBalanceForAccount(accountIndex);
            message += atm.getLastMessage();
            message += balance + "\n";
            message += WHAT_WOULD_YOU_LIKE_TO_DO;
        }
        actionType = null;
        return message;
    }

    /**
     * Returns lastMessage string from the ATM after making deposit.
     * Deposit is made in more than one step.
     *
     * @param inputString input string from user
     *
     * @return message
     */
    private String runDepositAction(String inputString) {
        String message = "";
        if (insertedCard != null && inputString.length() > 0) {
            if (accountIndexToUse == -1) {
                int accountIndex = Integer.parseInt(inputString);
                accountIndex--;
                System.out.println("Account index used" + accountIndex);
                accountIndexToUse = accountIndex;
                message += ENTER_DEPOSIT_AMOUNT;
            }
            else {
                int amountToDeposit = Integer.parseInt(inputString);
                input.clearInput();
                atm.makeDeposit(accountIndexToUse, amountToDeposit);
            }
            message += atm.getLastMessage();
        }
        return message;
    }

    /**
     * Returns lastMessage from ATM when running the withdrawal
     *
     * @param inputString input string from user
     *
     * @return message
     */
    private String runWithdrawalAction(String inputString) {
        StringBuilder message = new StringBuilder();
        if (accountIndexFromUse == -1) {
            accountIndexFromUse = Integer.parseInt(inputString);
            accountIndexFromUse--;
            message.append(AMOUNT);
        }
        else {
            amount = Integer.parseInt(inputString);
            if (amount > 0) {
                amount = atm.makeWithdrawal(accountIndexFromUse, amount);
                message.append(CASH_RETURNED)
                    .append("\n")
                    .append(amount);
                amount = 0;
                actionType = null;
            }
            else {
                message.append(AMOUNT);
            }
        }
        return message.toString();
    }

    /**
     * Returns lastMessage from ATM when running the transfer
     *
     * @param inputString input string from user
     *
     * @return message
     */
    private String runTransferAction(String inputString) {
        StringBuilder message = new StringBuilder();
        if (accountIndexFromUse == -1) {
            accountIndexFromUse = Integer.parseInt(inputString);
            accountIndexFromUse--;
            System.out.println("Setting accountIndexFromUse: " + accountIndexFromUse);
            message.append(WHICH_ACCOUNT_TO);
        }
        else if (accountIndexToUse == -1) {
            accountIndexToUse = Integer.parseInt(inputString);
            accountIndexToUse--;
            System.out.println("Setting accountIndexToUse: " + accountIndexToUse);
            message.append(AMOUNT);
        }
        else if (Integer.parseInt(inputString) > 0) {
            atm.makeTransfer(
                    accountIndexFromUse,
                    accountIndexToUse,
                    Integer.parseInt(inputString));
            message.append(atm.getLastMessage())
                .append("\n")
                .append(WHAT_WOULD_YOU_LIKE_TO_DO);

            actionType = null;
            amount = 0;
        }
        else {
            message.append(AMOUNT);
        }
        return message.toString();
    }

    /**
     * Return a string from atm after the envelope is deposited
     *
     * @param envelope Envelope
     *
     * @return message
     */
    private String depositEnvelope(Envelope envelope)
    {
        actionType = null;
        if (envelope != null) {
            atm.depositEnvelope(envelope);
            String lastMessage = atm.getLastMessage();
            if (lastMessage.isEmpty()) {
                return new StringBuilder()
                        .append(DEPOSIT_SUCCESSFUL)
                        .append("\n")
                        .append(WHAT_WOULD_YOU_LIKE_TO_DO)
                        .toString();
            }
            else {
                return atm.getLastMessage();
            }
        }
        else {
            return ENVELOPE_EMPTY;
        }
    }
}
